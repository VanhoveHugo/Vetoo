const userController = require('../src/controllers/userController');
const User = require('../src/models/userModel');

beforeEach(() => {
    jest.mock('../../src/models/userModel');
});

describe('userController', () => {
    describe('getAll', () => {
            test('should return all users', async () => {
                jest.spyOn(User, 'findById').mockImplementation(() => Promise.resolve([
                    { id: 0, name: "undefined", email: "undefined", password: "undefined" }
                ]));
                
                const req = {};
                const res = {
                    status: jest.fn().mockReturnThis(),
                    json: jest.fn(),
                };

                await userController.getAll(req, res);

                expect(res.status).toHaveBeenCalledWith(200);
                expect(res.json).toHaveBeenCalledWith([
                    { id: 0, name: "undefined", email: "undefined", password: "undefined" },
                ]);    
            });
    });
    describe('create', () => {
        test('can create user', async () => {
            jest.spyOn(User, 'create').mockImplementation(() => {
                return { affectedRows: 1 };
            });

            const req = {
                body: {
                    name: "test",
                    email: "email",
                    password: "password",
                },
            };
            const res = {
                status: jest.fn().mockReturnThis(),
                json: jest.fn(),
            };

            await userController.create(req, res);

            expect(res.status).toHaveBeenCalledWith(200);
            expect(res.json).toHaveBeenCalledWith({ affectedRows: 1 });
        });
    });
});